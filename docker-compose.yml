services:

# Sector Server
  sector-server-a:
    build: ./sector-server
    environment:
      - SECTOR_NAME=sector-server-a
      - QUEUE_HOST=queueA
    depends_on:
      queueA:
        condition: service_healthy


# Sector Sensor
  sector-sensor-a:
    build: ./sensor
    environment:
      - SECTOR_NAME=sector-server-a
      - SENSOR_NAME=sensor-a
    depends_on:
      - sector-server-a

###################################################################################################################

# Central Server

  ## Server
  central-server:
    build: ./central-server
    links:
      - central-db
    environment:
      - DB_CONN_STRING=postgresql://root:obligatorioequipo3@central-db:5432/central-db?sslmode=disable
      - MIRROR_DB_SERVER_HOST=mirror-db-server
    depends_on:
      queueA:
        condition: service_healthy
      central-db:
        condition: service_healthy
    ports:
      - "80:8080"

  ## Central DB
  central-db:
      image: postgres:13.1-alpine
      environment:
        POSTGRES_DB: central-db
        POSTGRES_USER: root
        POSTGRES_PASSWORD: obligatorioequipo3
      healthcheck:
        test: pg_isready -d central-db
        interval: 10s
        timeout: 30s
        retries: 5
        start_period: 80s 
      volumes:
        - ./init.sql:/docker-entrypoint-initdb.d/init.sql

###################################################################################################################

# Mirror DB Server

  ## Server
  mirror-db-server:
    build: ./mirror-db-server
    links:
      - mirror-backup-db
    environment:
      - DB_CONN_STRING=postgresql://root:obligatorioequipo3@mirror-backup-db:5432/mirror-backup-db?sslmode=disable
    depends_on:
      mirror-backup-db:
        condition: service_healthy
    ports:
      - "81:8080"

  ## Mirror Backup DB
  mirror-backup-db:
      image: postgres:13.1-alpine
      environment:
        POSTGRES_DB: mirror-backup-db
        POSTGRES_USER: root
        POSTGRES_PASSWORD: obligatorioequipo3
      healthcheck:
        test: pg_isready -d mirror-backup-db
        interval: 10s
        timeout: 30s
        retries: 5
        start_period: 80s 
      volumes:
        - ./init.sql:/docker-entrypoint-initdb.d/init.sql

###################################################################################################################

# RabbitMQ Queues

  queueA:
    image: rabbitmq:3-alpine
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 3
    ports:
      - "5672:5672"
    expose:
      - "5672"
#####################################################################################################################
  
  batch:
      build: ./batching
      environment:
        - WEB-SERVER-HOST=web-server
        - MIRROR-DB-SERVER=mirror-db-server
      ports:
        - '69:8080'
      volumes:
        - ./data:/app/data

   

  # mongo:
  #   image: mongo
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/