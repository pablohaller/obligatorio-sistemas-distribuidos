services:

# Sector Server
  sector-server-a:
    build: ./sector-server
    environment:
      - SECTOR_NAME=sector-server-a
      - QUEUE_HOST=queue1
      - QUEUE_NAME=queue1
    depends_on:
      queue1:
        condition: service_healthy

# Sector Sensor
  sector-sensor-a:
    build: ./sensor
    environment:
      - SECTOR_NAME=sector-server-a
      - SENSOR_NAME=sensor-a
    depends_on:
      - sector-server-a

###################################################################################################################

# Central Server

  ## Server
  central-server:
    build: ./central-server
    links:
      - central-db
    environment:
      - QUEUE_HOST=queue1
      - QUEUE_NAME=queue1
      - DB_CONN_STRING=postgresql://my_user:my_password@central-db:5432/central-db?sslmode=disable
      - MIRROR_DB_SERVER_HOST=mirror-db-server
    depends_on:
      queue1:
        condition: service_healthy
      central-db:
        condition: service_healthy
    ports:
      - "80:8080"

  ## Central DB
  central-db:
    image: 'bitnami/postgresql:latest'
    ports:
      - '5432'
    volumes:
      - './central-db/data:/bitnami/postgresql'
      - './central-db/init.sql:/docker-entrypoint-initdb.d/init.sql'
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_USERNAME=my_user
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_DATABASE=central-db
    healthcheck:
      test: pg_isready -U my_user -d central-db
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 80s

###################################################################################################################

# Mirror DB Server

  ## Server
  mirror-db-server:
    build: ./mirror-db-server
    links:
      - mirror-backup-db
    environment:
      - DB_CONN_STRING=postgresql://repl_user:repl_password@mirror-backup-db:5432/central-db?sslmode=disable
    depends_on:
      mirror-backup-db:
        condition: service_healthy
    ports:
      - "81:8080"

  ## Mirror Backup DB
  mirror-backup-db:
    image: 'bitnami/postgresql:latest'
    ports:
      - '5432'
    depends_on:
      central-db:
        condition: service_healthy
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_HOST=central-db
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
    healthcheck:
      test: pg_isready -U repl_user -d central-db
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 80s

###################################################################################################################

# RabbitMQ Queues

  queue1:
    image: rabbitmq:3-alpine
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 3
    ports:
      - "5672:5672"
    expose:
      - "5672"
#####################################################################################################################
  
  batch:
      build: ./batching
      environment:
        - WEB-SERVER-HOST=web-server
        - MIRROR-DB-SERVER=mirror-db-server
      ports:
        - '69:8080'
      volumes:
        - ./data:/app/data

  # webserver-next:
  #   build: ./webserver-next
  #   environment:
  #     - NAME=WEBSERVER-NEXT
  #   ports:
  #     - "3000:3000"
  #     - "5555:5555"

  # mongo:
  #   image: mongo
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/